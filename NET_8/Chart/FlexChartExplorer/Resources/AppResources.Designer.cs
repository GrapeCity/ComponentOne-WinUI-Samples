//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FlexChartExplorer.Resources {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class AppResources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal AppResources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("FlexChartExplorer.Resources.AppResources", typeof(AppResources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You can use the FlexChart&apos;s Rendering and Rendered events to add arbitrary elements behind or above the regular chart elements.
        ///
        ///For example,the chart below has three zones created in the chart&apos;s Rendering event handler.
        /// </summary>
        public static string AlarmZonesDescription {
            get {
                return ResourceManager.GetString("AlarmZonesDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Alarm Zones.
        /// </summary>
        public static string AlarmZonesTitle {
            get {
                return ResourceManager.GetString("AlarmZonesTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The sample shows animation when loading or updating data in FlexChart control..
        /// </summary>
        public static string AnimationDescription {
            get {
                return ResourceManager.GetString("AnimationDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The sample below demonstrates grouping of axis labels in FlexChart. You can set the Axis.GroupNames to the name of the property by which the axis labels should be grouped. To display more than one group level on the axis specify a comma-separated string to the GroupNames property..
        /// </summary>
        public static string AxisGroupsDescription {
            get {
                return ResourceManager.GetString("AxisGroupsDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Axis Groups (Hierarchical Axes).
        /// </summary>
        public static string AxisGroupsHeader {
            get {
                return ResourceManager.GetString("AxisGroupsHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Axis Groups.
        /// </summary>
        public static string AxisGroupsTitle {
            get {
                return ResourceManager.GetString("AxisGroupsTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The sample shows various Axis options to avoid label overlapping..
        /// </summary>
        public static string AxisLabelsDescription {
            get {
                return ResourceManager.GetString("AxisLabelsDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Axis Labels.
        /// </summary>
        public static string AxisLabelsTitle {
            get {
                return ResourceManager.GetString("AxisLabelsTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The sample shows the chart with the scrollbar on X axis of the chart..
        /// </summary>
        public static string AxisScrollbarDescription {
            get {
                return ResourceManager.GetString("AxisScrollbarDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Axis Scrollbar.
        /// </summary>
        public static string AxisScrollbarTitle {
            get {
                return ResourceManager.GetString("AxisScrollbarTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The sample shows how you can use the FlexChart to show two sets of values from a single array of data. The sample does the following:
        ///    1.Set the chart&apos;s DataSource property to an array of data objects. Each data object has values for &apos;date&apos;, &apos;sales&apos;, and &apos;downloads&apos;.
        ///    2.Set the chart&apos;s bindingX property to &apos;date&apos;.
        ///    3.Add a Series object to the chart&apos;s series array and set its binding property to &apos;sales&apos;.
        ///    4.Add a second Series object to the chart&apos;s series array and set its binding property t [rest of string was truncated]&quot;;.
        /// </summary>
        public static string BindingDescription {
            get {
                return ResourceManager.GetString("BindingDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Binding.
        /// </summary>
        public static string BindingTitle {
            get {
                return ResourceManager.GetString("BindingTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Box&amp;Whisker plot is normally used to compare distributions between different sets of numerical data..
        /// </summary>
        public static string BoxWhiskerChartDescription {
            get {
                return ResourceManager.GetString("BoxWhiskerChartDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Box-Whisker Plot.
        /// </summary>
        public static string BoxWhiskerChartTitle {
            get {
                return ResourceManager.GetString("BoxWhiskerChartTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Break-Even chart is a chart that shows the sales volume level at which total costs equal sales..
        /// </summary>
        public static string BreakEvenDescription {
            get {
                return ResourceManager.GetString("BreakEvenDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Break-Even Chart.
        /// </summary>
        public static string BreakEvenTitle {
            get {
                return ResourceManager.GetString("BreakEvenTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unlike most other chart types, FlexChart&apos;s Bubble Charts display three dimensions of data: X, Y, and size.
        ///
        ///To create bubble charts with the FlexChart control, you must set the binding property to a comma-delimited list of property names. The first property will be bound to the Y value, and the second to the bubble size..
        /// </summary>
        public static string BubbleDescription {
            get {
                return ResourceManager.GetString("BubbleDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Bubble Chart.
        /// </summary>
        public static string BubbleHeader {
            get {
                return ResourceManager.GetString("BubbleHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The sample demonstrates how you can use FlexChart&apos;s LabelRendering event to customize the DataLabel&apos;s rendering. The sample below demonstrates canceling the rendering of certain data labels based on their point index..
        /// </summary>
        public static string CustomDataLabelsDescription {
            get {
                return ResourceManager.GetString("CustomDataLabelsDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Custom Data Labels.
        /// </summary>
        public static string CustomDataLabelsTitle {
            get {
                return ResourceManager.GetString("CustomDataLabelsTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The sample demonstrates how you can use the FlexChart&apos;s DataLabel property to add labels to each data point..
        /// </summary>
        public static string DataLabelsDescription {
            get {
                return ResourceManager.GetString("DataLabelsDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Data Labels.
        /// </summary>
        public static string DataLabelsTitle {
            get {
                return ResourceManager.GetString("DataLabelsTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The ErrorBar class extends the regular Series class to provide error bars that can be added on top of the regular series data..
        /// </summary>
        public static string ErrorBarsDescription {
            get {
                return ResourceManager.GetString("ErrorBarsDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error Bars.
        /// </summary>
        public static string ErrorBarsTitle {
            get {
                return ResourceManager.GetString("ErrorBarsTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The demo shows the list of extended palettes for charting controls..
        /// </summary>
        public static string ExtendedPalettesDescription {
            get {
                return ResourceManager.GetString("ExtendedPalettesDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Extended Palettes.
        /// </summary>
        public static string ExtendedPalettesTitle {
            get {
                return ResourceManager.GetString("ExtendedPalettesTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to FlexChart supports two types of financial chart: Candlestick and HighLowOpenClose. To use them, set the ChartType property to the type you want, and set the series Binding property to a comma-delimited string that specifies the fields that contain the high, low, open, and close values in the data source..
        /// </summary>
        public static string FinancialChartDescription {
            get {
                return ResourceManager.GetString("FinancialChartDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Financial Chart.
        /// </summary>
        public static string FinancialChartTitle {
            get {
                return ResourceManager.GetString("FinancialChartTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Funnel charts are an excellent tool for summarizing data. It enables users to quickly visualize stages in a linear process. The  sample below demonstrates creating a Funnel chart in FlexChart..
        /// </summary>
        public static string FunnelDescription {
            get {
                return ResourceManager.GetString("FunnelDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Funnel Chart.
        /// </summary>
        public static string FunnelTitle {
            get {
                return ResourceManager.GetString("FunnelTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A Histogram chart is used to study the distribution of non-categorical data by dividing it into bins of specified width. It plots the frequency of data items that fall in each of these bins..
        /// </summary>
        public static string HistogramChartDescription {
            get {
                return ResourceManager.GetString("HistogramChartDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Histogram.
        /// </summary>
        public static string HistogramChartTitle {
            get {
                return ResourceManager.GetString("HistogramChartTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The sample below demonstrates the use of FlexChart&apos;s HitTest method.
        ///The HitTest method takes a point and returns the nearest chart element. It can be used to provide interactive features such as clickable regions, drill-downs, etc. Move pointer over chart to see information about the chart element that is closest to the mouse..
        /// </summary>
        public static string HitTestDescription {
            get {
                return ResourceManager.GetString("HitTestDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Hit Test.
        /// </summary>
        public static string HitTestTitle {
            get {
                return ResourceManager.GetString("HitTestTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The sample below shows using FlexChart&apos;s SaveImage method, saving the chart to a Stream which is further used to export the chart as an image.
        ///
        ///FlexChart supports saving charts into multiple formats like JPG, PNG and SVG..
        /// </summary>
        public static string ImageExportDescription {
            get {
                return ResourceManager.GetString("ImageExportDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Image Export.
        /// </summary>
        public static string ImageExportTitle {
            get {
                return ResourceManager.GetString("ImageExportTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The sample shows the FlexChart&apos;s basic features. It binds the chart to a data source and allows you to select the chart type, series stacking, and rotation. If you move the mouse over a chart element, a tooltip will appear showing details about the data point..
        /// </summary>
        public static string IntroDescription {
            get {
                return ResourceManager.GetString("IntroDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to FlexChart Introduction .
        /// </summary>
        public static string IntroHeader {
            get {
                return ResourceManager.GetString("IntroHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Intro.
        /// </summary>
        public static string IntroTitle {
            get {
                return ResourceManager.GetString("IntroTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The sample shows how you can use the main legend properties..
        /// </summary>
        public static string LegendDescription {
            get {
                return ResourceManager.GetString("LegendDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The LineMarker class allows you to add a mouse-driven cursor to your charts. The cursor consists of a text element used to display information about the point under the mouse and optional lines to indicate the exact position of the mouse..
        /// </summary>
        public static string LineMarkerDescription {
            get {
                return ResourceManager.GetString("LineMarkerDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Line Marker.
        /// </summary>
        public static string LineMarkerTitle {
            get {
                return ResourceManager.GetString("LineMarkerTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The FlexChart control allows you to display data using logarithmic axis. You can use it to spread clustered data and improve the clarity of your charts without sacrificing accuracy..
        /// </summary>
        public static string LogAxesDescription {
            get {
                return ResourceManager.GetString("LogAxesDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Logarithmic Axes.
        /// </summary>
        public static string LogAxesHeader {
            get {
                return ResourceManager.GetString("LogAxesHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Log Axes.
        /// </summary>
        public static string LogAxesTitle {
            get {
                return ResourceManager.GetString("LogAxesTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The view shows how to create multiple pie charts based on the same data source.
        ///
        ///To create multiple pie charts, just specify several comma-separated properties in FlexPie&apos;s Binding..
        /// </summary>
        public static string MultiPieDescription {
            get {
                return ResourceManager.GetString("MultiPieDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Multiple Pie Charts.
        /// </summary>
        public static string MultiPieHeader {
            get {
                return ResourceManager.GetString("MultiPieHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Multi Pies.
        /// </summary>
        public static string MultiPieTitle {
            get {
                return ResourceManager.GetString("MultiPieTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A Pareto is a special histogram chart with columns sorted in descending order and a rising line that represents the cumulative total percentage. Pareto charts makes it easier to analyze most significant issues and prioritise corrective actions..
        /// </summary>
        public static string ParetoDescription {
            get {
                return ResourceManager.GetString("ParetoDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Pareto Chart.
        /// </summary>
        public static string ParetoHeader {
            get {
                return ResourceManager.GetString("ParetoHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The sample shows animation when loading or updating data in FlexPie control..
        /// </summary>
        public static string PieAnimationDescription {
            get {
                return ResourceManager.GetString("PieAnimationDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The sample shows the FlexPie&apos;s basic features. It binds the chart to a data source. If you move the mouse over a chart element, a tooltip will appear showing details about the data point..
        /// </summary>
        public static string PieChartDescription {
            get {
                return ResourceManager.GetString("PieChartDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Pie Chart.
        /// </summary>
        public static string PieChartTitle {
            get {
                return ResourceManager.GetString("PieChartTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The FlexPie control allows you to select data points by clicking or touching a pie slice. Use the SelectionMode property to specify whether you want to allow selection by data point or no selection at all (default)..
        /// </summary>
        public static string PieSelectionDescription {
            get {
                return ResourceManager.GetString("PieSelectionDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Pie Selection.
        /// </summary>
        public static string PieSelectionTitle {
            get {
                return ResourceManager.GetString("PieSelectionTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The sample below shows how to create radar chart with FlexRadar control..
        /// </summary>
        public static string RadarDescription {
            get {
                return ResourceManager.GetString("RadarDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The C1RangeSelector allows end users to adjust the chart visible data range at runtime..
        /// </summary>
        public static string RangeSelectorDescription {
            get {
                return ResourceManager.GetString("RangeSelectorDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Range Selector.
        /// </summary>
        public static string RangeSelectorTitle {
            get {
                return ResourceManager.GetString("RangeSelectorTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The sample demonstrates the FlexChart&apos;s selection feature. The SelectionMode property determines whether the chart should select series or points when the user clicks on the chart..
        /// </summary>
        public static string SelectionDescription {
            get {
                return ResourceManager.GetString("SelectionDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The sample shows how you can use the FlexChart to show data from multiple data sources, one per series.
        ///    The sample does the following:
        ///    1.Set the chart&apos;s bindingX and binding properties to &apos;x&apos; and &apos;y&apos;.
        ///    2.Add a Series object to the chart&apos;s series array and set its DataSource property to an array of objects that have &apos;x&apos; and &apos;y&apos; properties.
        ///    3.Add a second Series object to the chart&apos;s series array and set its DataSource property to a different array of objects that have &apos;x&apos; and &apos;y&apos; propertie [rest of string was truncated]&quot;;.
        /// </summary>
        public static string SeriesBindingDescription {
            get {
                return ResourceManager.GetString("SeriesBindingDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Series Binding.
        /// </summary>
        public static string SeriesBindingTitle {
            get {
                return ResourceManager.GetString("SeriesBindingTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Sunburst charts are used for visualizing hierarchical data in circular form. The sample below shows basic features of a Sunburst chart..
        /// </summary>
        public static string SunburstChartDescription {
            get {
                return ResourceManager.GetString("SunburstChartDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Sunburst Chart.
        /// </summary>
        public static string SunburstChartTitle {
            get {
                return ResourceManager.GetString("SunburstChartTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Theme.
        /// </summary>
        public static string Theme {
            get {
                return ResourceManager.GetString("Theme", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The sample shows main functionality of TreeMap control. TreeMap charts are compact way of visualizing hierarchical data in form of nested rectangles with area of each rectangle depicting the quantity of each category..
        /// </summary>
        public static string TreeMapDescription {
            get {
                return ResourceManager.GetString("TreeMapDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TreeMap.
        /// </summary>
        public static string TreeMapTitle {
            get {
                return ResourceManager.GetString("TreeMapTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The sample below shows using TrendLines in FlexChart. You can use different trend line types by setting the FitType property of TrendLine..
        /// </summary>
        public static string TrendLineDemoDescription {
            get {
                return ResourceManager.GetString("TrendLineDemoDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Trend Line.
        /// </summary>
        public static string TrendLineDemoTitle {
            get {
                return ResourceManager.GetString("TrendLineDemoTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The sample shows the FlexChart with two y-axes..
        /// </summary>
        public static string TwoYAxesDescription {
            get {
                return ResourceManager.GetString("TwoYAxesDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Two Y Axes.
        /// </summary>
        public static string TwoYAxesTitle {
            get {
                return ResourceManager.GetString("TwoYAxesTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The sample shows Waterfall Series in FlexChart. The Waterfall series is normally used to demonstrate how the starting position either increases or decreases through a series of changes..
        /// </summary>
        public static string WaterfallChartDescription {
            get {
                return ResourceManager.GetString("WaterfallChartDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Waterfall.
        /// </summary>
        public static string WaterfallChartTitle {
            get {
                return ResourceManager.GetString("WaterfallChartTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The sample shows how to implement a custom zoom for the FlexChart control. Use the mouse to select a rectangular area on the plot area. The chart will zoom in on the selected area. When you are done, click the &apos;Reset&apos; button below the chart to return to the original view..
        /// </summary>
        public static string ZoomDescription {
            get {
                return ResourceManager.GetString("ZoomDescription", resourceCulture);
            }
        }
    }
}
