<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AlarmZonesDescription" xml:space="preserve">
    <value>You can use the FlexChart's Rendering and Rendered events to add arbitrary elements behind or above the regular chart elements.

For example,the chart below has three zones created in the chart's Rendering event handler</value>
  </data>
  <data name="AlarmZonesTitle" xml:space="preserve">
    <value>Alarm Zones</value>
  </data>
  <data name="AnimationDescription" xml:space="preserve">
    <value>The sample shows animation when loading or updating data in FlexChart control.</value>
  </data>
  <data name="AxisGroupsDescription" xml:space="preserve">
    <value>The sample below demonstrates grouping of axis labels in FlexChart. You can set the Axis.GroupNames to the name of the property by which the axis labels should be grouped. To display more than one group level on the axis specify a comma-separated string to the GroupNames property.</value>
  </data>
  <data name="AxisGroupsHeader" xml:space="preserve">
    <value>Axis Groups (Hierarchical Axes)</value>
  </data>
  <data name="AxisGroupsTitle" xml:space="preserve">
    <value>Axis Groups</value>
  </data>
  <data name="AxisLabelsDescription" xml:space="preserve">
    <value>The sample shows various Axis options to avoid label overlapping.</value>
  </data>
  <data name="AxisLabelsTitle" xml:space="preserve">
    <value>Axis Labels</value>
  </data>
  <data name="AxisScrollbarDescription" xml:space="preserve">
    <value>The sample shows the chart with the scrollbar on X axis of the chart.</value>
  </data>
  <data name="AxisScrollbarTitle" xml:space="preserve">
    <value>Axis Scrollbar</value>
  </data>
  <data name="BindingDescription" xml:space="preserve">
    <value>The sample shows how you can use the FlexChart to show two sets of values from a single array of data. The sample does the following:
    1.Set the chart's DataSource property to an array of data objects. Each data object has values for 'date', 'sales', and 'downloads'.
    2.Set the chart's bindingX property to 'date'.
    3.Add a Series object to the chart's series array and set its binding property to 'sales'.
    4.Add a second Series object to the chart's series array and set its binding property to 'downloads'.</value>
  </data>
  <data name="BindingTitle" xml:space="preserve">
    <value>Binding</value>
  </data>
  <data name="BoxWhiskerChartDescription" xml:space="preserve">
    <value>The Box&amp;Whisker plot is normally used to compare distributions between different sets of numerical data.</value>
  </data>
  <data name="BoxWhiskerChartTitle" xml:space="preserve">
    <value>Box-Whisker Plot</value>
  </data>
  <data name="BreakEvenDescription" xml:space="preserve">
    <value>Break-Even chart is a chart that shows the sales volume level at which total costs equal sales.</value>
  </data>
  <data name="BreakEvenTitle" xml:space="preserve">
    <value>Break-Even Chart</value>
  </data>
  <data name="BubbleDescription" xml:space="preserve">
    <value>Unlike most other chart types, FlexChart's Bubble Charts display three dimensions of data: X, Y, and size.

To create bubble charts with the FlexChart control, you must set the binding property to a comma-delimited list of property names. The first property will be bound to the Y value, and the second to the bubble size.</value>
  </data>
  <data name="BubbleHeader" xml:space="preserve">
    <value>Bubble Chart</value>
  </data>
  <data name="CustomDataLabelsDescription" xml:space="preserve">
    <value>The sample demonstrates how you can use FlexChart's LabelRendering event to customize the DataLabel's rendering. The sample below demonstrates canceling the rendering of certain data labels based on their point index.</value>
  </data>
  <data name="CustomDataLabelsTitle" xml:space="preserve">
    <value>Custom Data Labels</value>
  </data>
  <data name="DataLabelsDescription" xml:space="preserve">
    <value>The sample demonstrates how you can use the FlexChart's DataLabel property to add labels to each data point.</value>
  </data>
  <data name="DataLabelsTitle" xml:space="preserve">
    <value>Data Labels</value>
  </data>
  <data name="ErrorBarsDescription" xml:space="preserve">
    <value>The ErrorBar class extends the regular Series class to provide error bars that can be added on top of the regular series data.</value>
  </data>
  <data name="ErrorBarsTitle" xml:space="preserve">
    <value>Error Bars</value>
  </data>
  <data name="ExtendedPalettesDescription" xml:space="preserve">
    <value>The demo shows the list of extended palettes for charting controls.</value>
  </data>
  <data name="ExtendedPalettesTitle" xml:space="preserve">
    <value>Extended Palettes</value>
  </data>
  <data name="FinancialChartDescription" xml:space="preserve">
    <value>FlexChart supports two types of financial chart: Candlestick and HighLowOpenClose. To use them, set the ChartType property to the type you want, and set the series Binding property to a comma-delimited string that specifies the fields that contain the high, low, open, and close values in the data source.</value>
  </data>
  <data name="FinancialChartTitle" xml:space="preserve">
    <value>Financial Chart</value>
  </data>
  <data name="FunnelDescription" xml:space="preserve">
    <value>Funnel charts are an excellent tool for summarizing data. It enables users to quickly visualize stages in a linear process. The  sample below demonstrates creating a Funnel chart in FlexChart.</value>
  </data>
  <data name="FunnelTitle" xml:space="preserve">
    <value>Funnel Chart</value>
  </data>
  <data name="HeatmapDescription" xml:space="preserve">
    <value>Shows Heatmap plot with gradient color scale. The data from two-dimensional array is shown as a table. The color of table's cell depends on the corresponding data value.</value>
  </data>
  <data name="HeatmapTitle" xml:space="preserve">
    <value>Heatmap Plot</value>
  </data>
  <data name="HistogramChartDescription" xml:space="preserve">
    <value>A Histogram chart is used to study the distribution of non-categorical data by dividing it into bins of specified width. It plots the frequency of data items that fall in each of these bins.</value>
  </data>
  <data name="HistogramChartTitle" xml:space="preserve">
    <value>Histogram</value>
  </data>
  <data name="HitTestDescription" xml:space="preserve">
    <value>The sample below demonstrates the use of FlexChart's HitTest method.
The HitTest method takes a point and returns the nearest chart element. It can be used to provide interactive features such as clickable regions, drill-downs, etc. Move pointer over chart to see information about the chart element that is closest to the mouse.</value>
  </data>
  <data name="HitTestTitle" xml:space="preserve">
    <value>Hit Test</value>
  </data>
  <data name="ImageExportDescription" xml:space="preserve">
    <value>The sample below shows using FlexChart's SaveImage method, saving the chart to a Stream which is further used to export the chart as an image.

FlexChart supports saving charts into multiple formats like JPG, PNG and SVG.</value>
  </data>
  <data name="ImageExportTitle" xml:space="preserve">
    <value>Image Export</value>
  </data>
  <data name="IntroDescription" xml:space="preserve">
    <value>The sample shows the FlexChart's basic features. It binds the chart to a data source and allows you to select the chart type, series stacking, and rotation. If you move the mouse over a chart element, a tooltip will appear showing details about the data point.</value>
  </data>
  <data name="IntroHeader" xml:space="preserve">
    <value>FlexChart Introduction </value>
  </data>
  <data name="IntroTitle" xml:space="preserve">
    <value>Intro</value>
  </data>
  <data name="LegendDescription" xml:space="preserve">
    <value>The sample shows how you can use the main legend properties.</value>
  </data>
  <data name="LineMarkerDescription" xml:space="preserve">
    <value>The LineMarker class allows you to add a mouse-driven cursor to your charts. The cursor consists of a text element used to display information about the point under the mouse and optional lines to indicate the exact position of the mouse.</value>
  </data>
  <data name="LineMarkerTitle" xml:space="preserve">
    <value>Line Marker</value>
  </data>
  <data name="LogAxesDescription" xml:space="preserve">
    <value>The FlexChart control allows you to display data using logarithmic axis. You can use it to spread clustered data and improve the clarity of your charts without sacrificing accuracy.</value>
  </data>
  <data name="LogAxesHeader" xml:space="preserve">
    <value>Logarithmic Axes</value>
  </data>
  <data name="LogAxesTitle" xml:space="preserve">
    <value>Log Axes</value>
  </data>
  <data name="MultiPieDescription" xml:space="preserve">
    <value>The view shows how to create multiple pie charts based on the same data source.

To create multiple pie charts, just specify several comma-separated properties in FlexPie's Binding.</value>
  </data>
  <data name="MultiPieHeader" xml:space="preserve">
    <value>Multiple Pie Charts</value>
  </data>
  <data name="MultiPieTitle" xml:space="preserve">
    <value>Multi Pies</value>
  </data>
  <data name="ParetoDescription" xml:space="preserve">
    <value>A Pareto is a special histogram chart with columns sorted in descending order and a rising line that represents the cumulative total percentage. Pareto charts makes it easier to analyze most significant issues and prioritise corrective actions.</value>
  </data>
  <data name="ParetoHeader" xml:space="preserve">
    <value>Pareto Chart</value>
  </data>
  <data name="PieAnimationDescription" xml:space="preserve">
    <value>The sample shows animation when loading or updating data in FlexPie control.</value>
  </data>
  <data name="PieChartDescription" xml:space="preserve">
    <value>The sample shows the FlexPie's basic features. It binds the chart to a data source. If you move the mouse over a chart element, a tooltip will appear showing details about the data point.</value>
  </data>
  <data name="PieChartTitle" xml:space="preserve">
    <value>Pie Chart</value>
  </data>
  <data name="PieSelectionDescription" xml:space="preserve">
    <value>The FlexPie control allows you to select data points by clicking or touching a pie slice. Use the SelectionMode property to specify whether you want to allow selection by data point or no selection at all (default).</value>
  </data>
  <data name="PieSelectionTitle" xml:space="preserve">
    <value>Pie Selection</value>
  </data>
  <data name="RadarDescription" xml:space="preserve">
    <value>The sample below shows how to create radar chart with FlexRadar control.</value>
  </data>
  <data name="RangeSelectorDescription" xml:space="preserve">
    <value>The C1RangeSelector allows end users to adjust the chart visible data range at runtime.</value>
  </data>
  <data name="RangeSelectorTitle" xml:space="preserve">
    <value>Range Selector</value>
  </data>
  <data name="SelectionDescription" xml:space="preserve">
    <value>The sample demonstrates the FlexChart's selection feature. The SelectionMode property determines whether the chart should select series or points when the user clicks on the chart.</value>
  </data>
  <data name="SeriesBindingDescription" xml:space="preserve">
    <value>The sample shows how you can use the FlexChart to show data from multiple data sources, one per series.
    The sample does the following:
    1.Set the chart's bindingX and binding properties to 'x' and 'y'.
    2.Add a Series object to the chart's series array and set its DataSource property to an array of objects that have 'x' and 'y' properties.
    3.Add a second Series object to the chart's series array and set its DataSource property to a different array of objects that have 'x' and 'y' properties.</value>
  </data>
  <data name="SeriesBindingTitle" xml:space="preserve">
    <value>Series Binding</value>
  </data>
  <data name="SunburstChartDescription" xml:space="preserve">
    <value>Sunburst charts are used for visualizing hierarchical data in circular form. The sample below shows basic features of a Sunburst chart.</value>
  </data>
  <data name="SunburstChartTitle" xml:space="preserve">
    <value>Sunburst Chart</value>
  </data>
  <data name="Theme" xml:space="preserve">
    <value>Theme</value>
  </data>
  <data name="TreeMapDescription" xml:space="preserve">
    <value>The sample shows main functionality of TreeMap control. TreeMap charts are compact way of visualizing hierarchical data in form of nested rectangles with area of each rectangle depicting the quantity of each category.</value>
  </data>
  <data name="TreeMapTitle" xml:space="preserve">
    <value>TreeMap</value>
  </data>
  <data name="TrendLineDemoDescription" xml:space="preserve">
    <value>The sample below shows using TrendLines in FlexChart. You can use different trend line types by setting the FitType property of TrendLine.</value>
  </data>
  <data name="TrendLineDemoTitle" xml:space="preserve">
    <value>Trend Line</value>
  </data>
  <data name="TwoYAxesDescription" xml:space="preserve">
    <value>The sample shows the FlexChart with two y-axes.</value>
  </data>
  <data name="TwoYAxesTitle" xml:space="preserve">
    <value>Two Y Axes</value>
  </data>
  <data name="WaterfallChartDescription" xml:space="preserve">
    <value>The sample shows Waterfall Series in FlexChart. The Waterfall series is normally used to demonstrate how the starting position either increases or decreases through a series of changes.</value>
  </data>
  <data name="WaterfallChartTitle" xml:space="preserve">
    <value>Waterfall</value>
  </data>
  <data name="ZoomDescription" xml:space="preserve">
    <value>The sample shows how to implement a custom zoom for the FlexChart control. Use the mouse to select a rectangular area on the plot area. The chart will zoom in on the selected area. When you are done, click the 'Reset' button below the chart to return to the original view.</value>
  </data>
  <data name="AxisMarkersTitle" xml:space="preserve">
    <value>Axis Markers</value>
  </data>
  <data name="AxisMarkersDescription" xml:space="preserve">
    <value>This sample shows how to display line markers over the axes. Both axes have markers which follow the pointer and display its position in data coordinates.</value>
  </data>
  <data name="ColumnHeatmapTitle" xml:space="preserve">
    <value>Column &amp; Heatmap</value>
  </data>
  <data name="ColumnHeatmapDescription" xml:space="preserve">
    <value>The sample shows combination of ranged column chart and heatmap. The heatmap displayed simplified presentation of the same data on the time axis.</value>
  </data>
  <data name="AxisBreakDescription" xml:space="preserve">
    <value>The sample displays the same data on two plot areas simulating axis break. Custom axis appearance and 'break area' are drawn in chart Rendered event handler.</value>
  </data>
  <data name="AxisBreakHeader" xml:space="preserve">
    <value>FlexChart with Axis Break</value>
  </data>
  <data name="AxisBreakTitle" xml:space="preserve">
    <value>Axis Break</value>
  </data>
</root>